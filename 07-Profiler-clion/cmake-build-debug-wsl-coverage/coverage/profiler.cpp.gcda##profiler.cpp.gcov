        -:    0:Source:/root/PEF/PEF2023-UBP/07-Profiler-clion/profiler.cpp
        -:    0:Graph:/root/PEF/PEF2023-UBP/07-Profiler-clion/cmake-build-debug-wsl-coverage/CMakeFiles/profiler.dir/profiler.cpp.gcno
        -:    0:Data:/root/PEF/PEF2023-UBP/07-Profiler-clion/cmake-build-debug-wsl-coverage/CMakeFiles/profiler.dir/profiler.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:#include <chrono>
        -:    3:#include <iomanip>
        -:    4:#include <cstdlib>
        -:    5:
        -:    6:using namespace std;
        -:    7:using namespace std::chrono;
        -:    8:
        -:    9:const int numIterations = 1000;
        -:   10:const int minArrayLength = 1000;
        -:   11:const int maxArrayLength = 1000000;
        -:   12:
        -:   13:template <typename T>
function _Z12processArrayIfEvPT_S1_S1_S1_i called 4000 returned 100% blocks executed 100%
     4000:   14:void processArray(T* A, T* B, T* C, T* D, int length) {
1111004000:   15:    for (int i = 0; i < length; ++i) {
     4000:   15-block  0
1111004000:   15-block  1
branch  0 taken 1111000000
branch  1 taken 4000 (fallthrough)
1111000000:   16:        A[i] = B[i] + C[i] * D[i];
1111000000:   16-block  0
        -:   17:    }
     4000:   18:}
        -:   19:
        -:   20:template <typename T>
function _Z11cargarArrayIfEvPT_i called 16 returned 100% blocks executed 100%
       16:   21:void cargarArray(T* array, int length) {
  4444016:   22:    for (int i = 0; i < length; ++i) {
       16:   22-block  0
  4444016:   22-block  1
branch  0 taken 4444000
branch  1 taken 16 (fallthrough)
  4444000:   23:        array[i] = rand()/float(RAND_MAX)  ;
  4444000:   23-block  0
call    0 returned 4444000
        -:   24:    }
       16:   25:}
        -:   26:
function main called 1 returned 100% blocks executed 91%
        1:   27:int main() {
        5:   28:    for (int arrayLength = minArrayLength; arrayLength <= maxArrayLength; arrayLength *= 10) {
        1:   28-block  0
        4:   28-block  1
        5:   28-block  2
branch  0 taken 4
branch  1 taken 1 (fallthrough)
       4*:   29:        float* A = new float[arrayLength];
        4:   29-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   29-block  1
    %%%%%:   29-block  2
call    2 never executed
        4:   29-block  3
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
       4*:   30:        float* B = new float[arrayLength];
        4:   30-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   30-block  1
    %%%%%:   30-block  2
call    2 never executed
        4:   30-block  3
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
       4*:   31:        float* C = new float[arrayLength];
        4:   31-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   31-block  1
    %%%%%:   31-block  2
call    2 never executed
        4:   31-block  3
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
       4*:   32:        float* D = new float[arrayLength];
        4:   32-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   32-block  1
    %%%%%:   32-block  2
call    2 never executed
        4:   32-block  3
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        -:   33:
        4:   34:        cargarArray (A,arrayLength);
        4:   34-block  0
call    0 returned 4
        4:   35:        cargarArray (B,arrayLength);
call    0 returned 4
        4:   36:        cargarArray (C,arrayLength);
call    0 returned 4
        4:   37:        cargarArray (D,arrayLength);
call    0 returned 4
        -:   38:
        4:   39:        auto start = high_resolution_clock::now();
call    0 returned 4
        -:   40:
     4004:   41:        for (int iteration = 0; iteration < numIterations; ++iteration) {
     4004:   41-block  0
branch  0 taken 4000
branch  1 taken 4 (fallthrough)
     4000:   42:            processArray(A, B, C, D, arrayLength);
     4000:   42-block  0
call    0 returned 4000
        -:   43:        }
        -:   44:
        4:   45:        auto end = high_resolution_clock::now();
        4:   45-block  0
call    0 returned 4
        4:   46:        duration<double, std::milli> duration = end - start;
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:   46-block  0
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:   46-block  1
        -:   47:
        4:   48:        cout << "Tamanio array: "    ;
        4:   48-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:   49:        cout << setw(10)  << arrayLength << " - ";
        4:   49-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4:   49-block  1
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
        4:   49-block  2
call    7 returned 4
branch  8 taken 4 (fallthrough)
branch  9 taken 0 (throw)
        4:   50:        cout << "Tiempo: ";
        4:   50-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:   51:        cout << setw(10)  << fixed << setprecision(2) << duration.count() << " ms";
        4:   51-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4:   51-block  1
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
        4:   51-block  2
call    7 returned 4
call    8 returned 4
branch  9 taken 4 (fallthrough)
branch 10 taken 0 (throw)
        4:   51-block  3
call   11 returned 4
call   12 returned 4
branch 13 taken 4 (fallthrough)
branch 14 taken 0 (throw)
        4:   51-block  4
call   15 returned 4
branch 16 taken 4 (fallthrough)
branch 17 taken 0 (throw)
        4:   52:        cout << endl;
        4:   52-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        -:   53:
        4:   54:        delete[] A;
        4:   54-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   54-block  1
call    2 returned 4
        4:   55:        delete[] B;
        4:   55-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   55-block  1
call    2 returned 4
        4:   56:        delete[] C;
        4:   56-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   56-block  1
call    2 returned 4
        4:   57:        delete[] D;
        4:   57-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   57-block  1
call    2 returned 4
        -:   58:    }
        -:   59:
        1:   60:    return 0;
        1:   60-block  0
        -:   61:}
